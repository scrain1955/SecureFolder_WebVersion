//
// Version 4.3 6/20/2019
// - Fixed problem posting to Website in postWebData() function.
//
package main;

import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.util.List;
import javax.swing.text.Document;
import java.awt.Font;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author Steve
 */
public class Secure_Folder extends javax.swing.JFrame {

    // Global variables
    private final String Revision = "4.3";
    private final String acctFilename = "acctinfo.dat";
    FileIOClass fileio;
    String lastIDread = "";
    boolean CryptError = false;
    boolean editinprocessFlag = false;
    boolean windowopened = false;
    String accountID;
    String Key;
    boolean startupcomplete = false;
    int searchposition = 0;
    List<String> accntFiles = new ArrayList<String>();

    @Override
    public void setTitle(String string) {
        super.setTitle("Secure Folder Revision " + Revision); //To change body of generated methods, choose Tools | Templates.
    }

    static final boolean debug = false;

    /**
     * Creates new form MainFrame
     */
    public Secure_Folder() {
        this.fileio = null;
        initComponents();
        fileio = new FileIOClass();
        if (this.fileio.readConfigFile(acctFilename) == true) {
            accountID = fileio.getLatestAcctID().trim();
            Key = "";
            List<String> recentacctList = fileio.getAcctIDList();
            for (String str : recentacctList) {
                javax.swing.JMenuItem jMenuItemRecent = new javax.swing.JMenuItem();
                jMenuItemRecent.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItemRecentActionPerformed(evt);
                    }
                });
                jMenuItemRecent.setText(str);
                jMenu5.add(jMenuItemRecent);
            }
        }
        privateText.setContentType("text/html");
        privateText.setCaretPosition(0);
        editToolBar.setVisible(false);
        editToolBar.setBorderPainted(false);
        editToolBar.setFloatable(false);
        nextButton.setVisible(false);
        MyHTMLEditorKit mykit = new MyHTMLEditorKit();
        privateText.setEditorKit(mykit);
        mykit.initializeDefaultFont();
        listAcctFiles();
        startupcomplete = true;
    }

    public class MyHTMLEditorKit extends HTMLEditorKit {

        private MutableAttributeSet attr = null;
        private Font font = new Font("Verdana", Font.PLAIN, 12);

        public void initializeDefaultFont() {
            if (attr == null) {
                attr = new SimpleAttributeSet();
            }

            StyleConstants.setFontFamily(attr, font.getFontName());
            StyleConstants.setFontSize(attr, font.getSize());
            StyleConstants.setForeground(attr, Color.black);
            StyleConstants.setBold(attr, false);
            StyleConstants.setItalic(attr, false);

            // set default font in html editor kit
            MutableAttributeSet iattr = getInputAttributes();
            iattr.removeAttribute(attr);
            iattr.addAttributes(attr);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopupMenu1 = new javax.swing.JPopupMenu();
        popupCopy = new javax.swing.JMenuItem();
        popupPaste = new javax.swing.JMenuItem();
        jPanel4 = new javax.swing.JPanel();
        searchlabel = new javax.swing.JLabel();
        searchfield = new javax.swing.JTextField();
        nextButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        privateInfoPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        privateText = new javax.swing.JEditorPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        editSaveButton = new javax.swing.JButton();
        CancelEditButton = new javax.swing.JButton();
        editToolBar = new javax.swing.JToolBar();
        boldButton = new javax.swing.JToggleButton();
        italicButton = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        QuitButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        CopyCommand = new javax.swing.JMenuItem();
        pasteCommand = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        popupCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        popupCopy.setText("Copy");
        popupCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupCopyActionPerformed(evt);
            }
        });
        PopupMenu1.add(popupCopy);

        popupPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_MASK));
        popupPaste.setText("Paste");
        popupPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupPasteActionPerformed(evt);
            }
        });
        PopupMenu1.add(popupPaste);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Secure Folder Revision 1.1");
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        searchlabel.setText("Search");

        searchfield.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                searchfieldInputMethodTextChanged(evt);
            }
        });
        searchfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchfieldActionPerformed(evt);
            }
        });
        searchfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchfieldKeyTyped(evt);
            }
        });

        nextButton.setBackground(new java.awt.Color(204, 255, 153));
        nextButton.setText("Next");
        nextButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchlabel)
                .addGap(18, 18, 18)
                .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchlabel)
                    .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(10, 10));

        privateText.setEditable(false);
        privateText.setBackground(new java.awt.Color(204, 204, 204));
        privateText.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        privateText.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        privateText.setMinimumSize(new java.awt.Dimension(10, 10));
        privateText.setPreferredSize(new java.awt.Dimension(50, 20));
        privateText.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                privateTextCaretUpdate(evt);
            }
        });
        privateText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                privateTextMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                privateTextMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(privateText);

        editSaveButton.setText("Edit");
        editSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSaveButtonActionPerformed(evt);
            }
        });

        CancelEditButton.setText("Discard Changes");
        CancelEditButton.setEnabled(false);
        CancelEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelEditButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(editSaveButton)
                .addGap(51, 51, 51)
                .addComponent(CancelEditButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(editSaveButton)
                .addComponent(CancelEditButton))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(180, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        editToolBar.setBorder(null);
        editToolBar.setRollover(true);

        boldButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/bold.gif"))); // NOI18N
        boldButton.setFocusable(false);
        boldButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boldButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldButtonActionPerformed(evt);
            }
        });
        editToolBar.add(boldButton);

        italicButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/images/italicize.gif"))); // NOI18N
        italicButton.setFocusable(false);
        italicButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        italicButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        italicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicButtonActionPerformed(evt);
            }
        });
        editToolBar.add(italicButton);

        javax.swing.GroupLayout privateInfoPanelLayout = new javax.swing.GroupLayout(privateInfoPanel);
        privateInfoPanel.setLayout(privateInfoPanelLayout);
        privateInfoPanelLayout.setHorizontalGroup(
            privateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(editToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        privateInfoPanelLayout.setVerticalGroup(
            privateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(privateInfoPanelLayout.createSequentialGroup()
                .addComponent(editToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Private Info", privateInfoPanel);

        QuitButton.setText("Quit");
        QuitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(QuitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(QuitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jMenuItem1.setText("New Account...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem3.setText("Open...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenu5.setText("Recent Accounts");
        jMenu1.add(jMenu5);

        jMenuItem4.setText("Clear Recent  Account List");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        CopyCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        CopyCommand.setText("Copy");
        CopyCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyCommandActionPerformed(evt);
            }
        });
        jMenu2.add(CopyCommand);

        pasteCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_MASK));
        pasteCommand.setText("Paste");
        pasteCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteCommandActionPerformed(evt);
            }
        });
        jMenu2.add(pasteCommand);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void QuitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitButtonActionPerformed
        if (!editinprocessFlag) {
            System.exit(0);
        }
        if (confirmDiscard()) {
            System.exit(0);
        }
    }//GEN-LAST:event_QuitButtonActionPerformed

//****************************************************************************************************
//      Get or Update display info
//****************************************************************************************************    
    private boolean updateDisplayInfo() {
        return updateDisplayInfo(accountID, Key);
    }

    private boolean updateDisplayInfo(String acctid, String Ekey) {
        //System.out.println("In <updateinfo> Routine");
        String clearstr;
        myWebClass wc = new myWebClass();
        //Crypt_DecryptClass decrypt = new Crypt_DecryptClass();
        //AES_CryptClass AES = new AES_CryptClass();
        AES256_CryptClass AES = new AES256_CryptClass();
        Check chk = new Check();

        int rc = chk.checkKey(Ekey, acctid);
        while (rc == -2) {
            rc = chk.checkKey(chk.getEncryptKey(), acctid); // keep asking for key until its ok
        }
        if (rc == -1) {
            return false;
        }

        // read web data
        if (rc >= 0 && !acctid.equals("null")) {
            try {
                byte[] crptdata = wc.getWebData("read", acctid);     // get encrypted data from web
                char[] chr = new char[crptdata.length]; // convert byte array to character array
                for (int j = 0; j < chr.length; j++) {
                    chr[j] = (char) crptdata[j];
                }
                String leadstr = new String(chr);   // now convert to string
                if (wc.getResponseCode() != 200) {   // 200 is a good response code)
                    JOptionPane.showMessageDialog(jTabbedPane1, "Server Response Error:" + wc.getResponseCode() + " \nServer may be down. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                if (leadstr.toLowerCase().startsWith("***error***") || leadstr.toLowerCase().startsWith("*** access denied")) {
                    clearstr = new String(crptdata);
                    JOptionPane.showMessageDialog(jTabbedPane1, clearstr, "Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                } else {
                    try {
                        //byte[] clearb = decrypt.crypto(false, chk.getEncryptKey(), crptdata); // decrypt the data
                        String decryptedString = AES.decrypt(leadstr, chk.getEncryptKey());
                        //System.out.print(decryptedString);
                        byte[] clearb = decryptedString.getBytes();
                        InputStream in = new ByteArrayInputStream(clearb);
                        HTMLDocument doc = new HTMLDocument();
                        privateText.getEditorKit().read(in, doc, 0);
                        privateText.setDocument(doc);
                        CryptError = false;
                    } catch (Exception e) {
                        //System.out.println("***Error Decrypting Data***" + e);
                        JOptionPane.showMessageDialog(jTabbedPane1, "Decryption Key not correct. \nPlease enter the correct key.", "Error", JOptionPane.ERROR_MESSAGE);
                        CryptError = true;
                        return false;
                    }
                }
            } catch (IOException e) {
                //System.out.println("***Error***" + e);
                privateText.setText("");  // clear the info panel
                JOptionPane.showMessageDialog(jTabbedPane1, "***Error***" + e, "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            //System.out.println("Saving Account Info");
            lastIDread = acctid.trim();
            fileio.saveAcctData(acctFilename, lastIDread);
            jTabbedPane1.setTitleAt(0, acctid);
            Key = chk.getEncryptKey();
            return true;
        }
        return false;
    }

    private class Check {

        private String encryptKey;

        public String getEncryptKey() {
            return this.encryptKey;
        }

        public int checkKey(String ekey, String acctname) {
            this.encryptKey = ekey;
            if (checkEncryptKey(ekey.trim(), true) == false) {
                JLabel lbl = new JLabel("Enter Encryption Key for " + acctname + ":");
                JPasswordField pf = new JPasswordField(15);
                JPanel entryPanel = new JPanel();
                entryPanel.add(lbl);
                entryPanel.add(pf);
                String pwd;
                pwd = "";
                int result = JOptionPane.showConfirmDialog(jTabbedPane1, entryPanel, "Enter Encryption Key", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.OK_OPTION) {
                    pwd = new String(pf.getPassword());
                }
                if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
                    return -1; // entry was cancelled
                }
                if (checkEncryptKey(pwd.trim()) == false) {
                    return -2; // key is too short
                } else { // Entered key is valid
                    this.encryptKey = pwd;
                    return 1; // key is ok and was changed
                }
            }
            return 0;  // key is ok and was not changed
        }
    }

//****************************************************************************************************
//      confirm edit discard
//****************************************************************************************************    
    private boolean confirmDiscard() {
        //System.out.println("In Confirm Discard routine");
        if (editinprocessFlag == true) {
            int rc = JOptionPane.showConfirmDialog(jTabbedPane1, "Discard Changes?", "Discard", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (rc == JOptionPane.YES_OPTION) {
                //System.out.println("Discarding edits");
                return true;
            }
        }
        return false;
    }

//****************************************************************************************************
//      Save the private info data Routine
//****************************************************************************************************    
    private boolean saveData(String account, String key) {
        return saveData(account, key, false);
    }

    private boolean saveData(String account, String key, boolean supressmsg) {
        //System.out.println("Saving Info Panel Data");
        myWebClass wc = new myWebClass();
        boolean rc;
        byte[] encdata;
        //Crypt_DecryptClass encrypt = new Crypt_DecryptClass();
        //AES_CryptClass AES = new AES_CryptClass();
        AES256_CryptClass AES = new AES256_CryptClass();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            Document doc = privateText.getDocument();
            privateText.getEditorKit().write(out, doc, 0, doc.getLength());
            //System.out.print(out);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "***ERROR*** An error occurred while trying to write the text:\n" + e);
        }

        try {
            // Encrypt the data
            //encdata = encrypt.crypto(true, key, out.toByteArray());
            String encdataString = AES.encrypt(out.toString("UTF-8"), key);
            //System.out.print(encdataString);
            encdata = encdataString.getBytes("UTF-8");
            // post the encrypted data
        } catch (Exception e) {
            //System.out.println("***Error***" + e);
            if (!supressmsg) {
                JOptionPane.showMessageDialog(jTabbedPane1, "***Error***" + e, "Error", JOptionPane.ERROR_MESSAGE);
            }
            return false;
        }

        try {
            rc = wc.postWebData(account, encdata);
        } catch (IOException e) {
            if (!supressmsg) {
                JOptionPane.showMessageDialog(jTabbedPane1, e + "\nSave operation failed.", "Save Failed", JOptionPane.ERROR_MESSAGE);
            }
            return false;
        }
        if (rc) {
            if (!supressmsg) {
                JOptionPane.showMessageDialog(jTabbedPane1, "Data Saved to " + account + ".", "Save Successful", JOptionPane.INFORMATION_MESSAGE);
            }
            return true;
        } else {
            String emsg = wc.getResponseMsg();
            if (!supressmsg) {
                JOptionPane.showMessageDialog(jTabbedPane1, emsg + "Save failed. Server may be down. Please try again.", "Save Failed", JOptionPane.ERROR_MESSAGE);
            }
            return false;
        }
    }

//****************************************************************************************************
//      Reset Edit Buttons
//****************************************************************************************************    
    private void resetEditButtons() {
        privateText.setEditable(false);
        editSaveButton.setText("Edit");
        CancelEditButton.setEnabled(false);
        editinprocessFlag = false;
        editToolBar.setVisible(false);
    }


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //System.out.println("Window Opened at startup");
        if (accountID.equals("null")) {
            openAccount();
        } else {
            updateDisplayInfo();
        }
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        createNewAccount();
        listAcctFiles();    // reload the file list to add the newly opened account to the combobox list
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JOptionPane.showMessageDialog(jTabbedPane1, "Secure Folder: Revision " + Revision, "Version Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        //System.out.println("File Open Selected");
        openAccount();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItemRecentActionPerformed(java.awt.event.ActionEvent evt) {
        //System.out.println("Recent account Selected.");
        openAccount(evt.getActionCommand().trim());
    }
//****************************************************************************************************
//      Open Account Routine
//****************************************************************************************************    

    private boolean openAccount() {
        return openAccount("", "");
    }

    private boolean openAccount(String acct) {
        return openAccount(acct, "");
    }

    private boolean openAccount(String acct, String encKey) {
        //System.out.println("In openaccount routine.");
        int rc;
        JComboBox acctname = new JComboBox();
        acctname.removeAllItems();
        if (acct.isEmpty() && encKey.isEmpty()) {
            for (String str : accntFiles) {
                acctname.addItem(str);
            }
        } else {
            acctname.addItem(acct);
        }
        acctname.setEditable(false);
        JTextField newkey = new JPasswordField();
        newkey.setText(encKey);
        Object[] message = {"Username:", acctname, "Encryption Key:", newkey};
        if (acct.length() == 0 || encKey.length() == 0) {
            rc = JOptionPane.showConfirmDialog(jTabbedPane1, message, "Open", JOptionPane.OK_CANCEL_OPTION);
        } else {
            rc = JOptionPane.OK_OPTION;
        }
        if (rc == JOptionPane.OK_OPTION) {
            if (!(acctname.getSelectedItem().equals(lastIDread))) {
                if (updateDisplayInfo((String) acctname.getSelectedItem(), newkey.getText())) {
                    accountID = (String) acctname.getSelectedItem();     // if successful update the id and key
                    Key = newkey.getText();
                    //System.out.println("accountID = " + acctname.getText());
                    if (nameIsUnique((String) acctname.getSelectedItem())) {
                        javax.swing.JMenuItem jMenuItemRecent = new javax.swing.JMenuItem();
                        jMenuItemRecent.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItemRecentActionPerformed(evt);
                            }
                        });
                        jMenuItemRecent.setText((String) acctname.getSelectedItem());
                        jMenu5.add(jMenuItemRecent);
                    }
                    return true;
                }
            }
        }
        return false;
    }

//****************************************************************************************************
//      Check name unique Routine
//****************************************************************************************************    
    private boolean nameIsUnique(String name) {
        int i;

        for (i = 0; i < jMenu5.getItemCount(); i++) {
            if (jMenu5.getItem(i).getText().equals(name)) {
                return false;
            }
        }
        return true;
    }

    private void CancelEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelEditButtonActionPerformed
        //System.out.println("Cancel Edit button Clicked");
        updateDisplayInfo();
        resetEditButtons();
    }//GEN-LAST:event_CancelEditButtonActionPerformed

    private void editSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSaveButtonActionPerformed
        // Edit/Save button was clicked
        //System.out.println("Edit/Save button pressed...");

        if (privateText.isEditable()) {
            //
            // Action is Save
            //
            if (saveData(accountID, Key) == true) {
                resetEditButtons();
            }        // Save the data
        } else {  // Action is EDIT
            editinprocessFlag = true;
            editToolBar.setVisible(true);
            privateText.setEditable(true);
            CancelEditButton.setEnabled(true);
            editSaveButton.setText("Save");
            privateText.requestFocusInWindow();
        }
    }//GEN-LAST:event_editSaveButtonActionPerformed

    private void searchfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchfieldActionPerformed
        //System.out.println("Search Field Enter button pressed. Search field is:" + searchfield.getText());
        search();
    }//GEN-LAST:event_searchfieldActionPerformed

    private void searchfieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_searchfieldInputMethodTextChanged
        //System.out.println("Search Field Text changed");
        searchposition = 0;
        if (searchfield.getText().trim().length() == 0) {
            nextButton.setVisible(false);
            privateText.getHighlighter().removeAllHighlights();
        }
    }//GEN-LAST:event_searchfieldInputMethodTextChanged

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        search();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void searchfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchfieldKeyTyped
        //System.out.println("Search Field Key typed");
        if (searchfield.getText().length() == 0) {
            searchposition = 0;
            nextButton.setVisible(false);
            privateText.getHighlighter().removeAllHighlights();
        }
    }//GEN-LAST:event_searchfieldKeyTyped

    private void privateTextCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_privateTextCaretUpdate
        //System.out.println("Carot position changed");
        AttributeSet attrs = ((HTMLEditorKit) privateText.getEditorKit()).getInputAttributes();
        Boolean isbold = StyleConstants.isBold(attrs);
        Boolean isitalic = StyleConstants.isItalic(attrs);
        if (!isitalic.equals(italicButton.isSelected())) {
            italicButton.setSelected(isitalic);
        }
        if (!isbold.equals(boldButton.isSelected())) {
            boldButton.setSelected(isbold);
        }
    }//GEN-LAST:event_privateTextCaretUpdate

    private void boldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldButtonActionPerformed
        //System.out.println("Bold action triggered");
        Action boldAction = new HTMLEditorKit.BoldAction();
        boldAction.actionPerformed(evt);
        privateText.requestFocusInWindow();
    }//GEN-LAST:event_boldButtonActionPerformed

    private void italicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicButtonActionPerformed
        //System.out.println("Italic action triggered");
        Action italicAction = new HTMLEditorKit.ItalicAction();
        italicAction.actionPerformed(evt);
        privateText.requestFocusInWindow();
    }//GEN-LAST:event_italicButtonActionPerformed

    private void pasteCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteCommandActionPerformed
        // Paste
        Action pasteAction = new HTMLEditorKit.PasteAction();
        pasteAction.actionPerformed(evt);
        privateText.requestFocusInWindow();
    }//GEN-LAST:event_pasteCommandActionPerformed

    private void CopyCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyCommandActionPerformed
        // Copy Command
        Action copyAction = new HTMLEditorKit.CopyAction();
        copyAction.actionPerformed(evt);
        privateText.requestFocusInWindow();
    }//GEN-LAST:event_CopyCommandActionPerformed

    private void popupCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupCopyActionPerformed
        Action copyAction = new HTMLEditorKit.CopyAction();
        copyAction.actionPerformed(evt);
        privateText.requestFocusInWindow();
    }//GEN-LAST:event_popupCopyActionPerformed

    private void privateTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privateTextMousePressed
        // show popup menu
        //System.out.println("Mouse Pressed");
        if (evt.isPopupTrigger()) {
            PopupMenu1.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_privateTextMousePressed

    private void popupPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupPasteActionPerformed
        // Paste
        Action pasteAction = new HTMLEditorKit.PasteAction();
        pasteAction.actionPerformed(evt);
        privateText.requestFocusInWindow();
    }//GEN-LAST:event_popupPasteActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        int rc = JOptionPane.showConfirmDialog(jTabbedPane1, "Clear Recent Account History?", "Clear History", JOptionPane.YES_NO_OPTION);
        if (rc == JOptionPane.YES_OPTION) {
            fileio.clearHistory(acctFilename);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void privateTextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privateTextMouseReleased
        //System.out.println("Mouse Released");
        if (evt.isPopupTrigger()) {
            PopupMenu1.show(this, evt.getX(), evt.getY());

    }//GEN-LAST:event_privateTextMouseReleased
    }
//****************************************************************************************************
//      Search
//****************************************************************************************************    

    private void search() {
        if (searchfield.getText().trim().length() == 0) {
            nextButton.setVisible(false);
            return;
        }
        nextButton.setVisible(true);
        String sstr = searchfield.getText();
        int len = sstr.length();
        javax.swing.text.DefaultHighlighter.DefaultHighlightPainter highlightPainter
                = new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
        Document doc = privateText.getDocument();
        privateText.getHighlighter().removeAllHighlights();
        try {
            String content = doc.getText(0, doc.getLength());
            int loc = content.toLowerCase().indexOf(sstr.toLowerCase(), searchposition);
            if (loc >= 0) {
                //System.out.println("Position = " + loc);
                privateText.getHighlighter().addHighlight(loc, loc + len, highlightPainter);
                privateText.setCaretPosition(loc);
                searchposition = loc + len;
            } else {
                JOptionPane.showMessageDialog(jTabbedPane1, "End reached. Search Value Not Found");
                searchposition = 0;
            }
        } catch (BadLocationException e) {
            JOptionPane.showMessageDialog(jTabbedPane1, e + "\n.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
//****************************************************************************************************
//      Create New Account
//****************************************************************************************************    

    private void createNewAccount() {

        JTextField acctname = new JTextField();
        JTextField newkey = new JPasswordField();
        JTextField confirmnewkey = new JPasswordField();
        Object[] message = {"New Account Username:", acctname, "New Account Encryption Key:", newkey, "Confirm Encryption Key:", confirmnewkey};

        int option;
        option = JOptionPane.OK_OPTION;
        boolean nameCheck;
        nameCheck = false;
        while (nameCheck == false && option == JOptionPane.OK_OPTION) {
            option = JOptionPane.showConfirmDialog(jTabbedPane1, message, "New Account", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                nameCheck = checkIDandPassword(acctname.getText(), newkey.getText(), confirmnewkey.getText());
            }
        }
        if (nameCheck == true && option == JOptionPane.OK_OPTION) {
            myWebClass wc = new myWebClass();
            boolean rc;
            rc = false;
            try {
                rc = wc.createAccount(acctname.getText().trim());
            } catch (IOException e) {
                System.out.println("***ERROR*** IOexception occurred");
                JOptionPane.showMessageDialog(jTabbedPane1, e + "\nAccount creation failed due to IOException.", "New Account Failed", JOptionPane.ERROR_MESSAGE);
            }
            if (rc) {
                String bstr = "*** " + acctname.getText().trim() + " ***";
                HTMLDocument doc = new HTMLDocument();
                try {
                    doc.insertString(0, bstr, null);
                } catch (BadLocationException e) {
                    System.out.println("BadLocation exception:" + e);
                }
                privateText.setDocument(doc);
                if (saveData(acctname.getText().trim(), newkey.getText(), true)) {
                    openAccount(acctname.getText().trim(), newkey.getText());
                    JOptionPane.showMessageDialog(jTabbedPane1, "Account " + acctname.getText().trim() + " created successfully.", "New Account Created", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(jTabbedPane1, "Account creation failed. (save Data)", "New Account Failed", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                String emsg = wc.getResponseMsg();
                JOptionPane.showMessageDialog(jTabbedPane1, emsg + "Account creation failed.", "New Account Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
//****************************************************************************************************
//      Check ID and password Rules
//****************************************************************************************************    

    private boolean checkIDandPassword(String acct, String nkey, String confirmnkey) {
        String msg = "";
        String pattern, pattern1;
        pattern = "^[A-Za-z]\\w{4,}";
        pattern1 = "^[A-Za-z]\\w{6,15}";
        if (nkey.trim().matches(pattern1) == false) {
            msg += "Key must be between 7 to 16 characters, start with a letter and contain only numbers and letters.\n";
        }
        if (acct.trim().matches(pattern) == false) {
            msg += "Account must be at least 5 characters, start with a letter and contain only numbers and letters.\n";
        }
        if (nkey.trim().equals(confirmnkey.trim()) == false) {
            msg += "Key and confirmation keys must match.\n";
        }
        if (nkey.trim().equalsIgnoreCase(acct.trim())) {
            msg += "Key and Account Name cannot be the same.\n";
        }
        if (msg.length() != 0) {
            JOptionPane.showMessageDialog(jTabbedPane1, msg, "Account Name Rules", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }

//****************************************************************************************************
//      Check Encryption Key Rules
//****************************************************************************************************    
    private boolean checkEncryptKey(String keyval) {
        return (checkEncryptKey(keyval, false));
    }

    private boolean checkEncryptKey(String key, boolean suppressmsg) {

        String pattern;
        pattern = "^[A-Za-z]\\w{4,}";
        if (key.trim().matches(pattern) == false) {
            if (!suppressmsg) {
                JOptionPane.showMessageDialog(jTabbedPane1, "Key must be at least 6 characters, start with a letter and contain only numbers and letters.\n", "Key Name Rules", JOptionPane.INFORMATION_MESSAGE);
            }
            return false;
        }
        return true;
    }

//****************************************************************************************************
//      Check Encryption Key Rules
//****************************************************************************************************    
    private void listAcctFiles() {
        myWebClass wc = new myWebClass();

        try {
            String resultdata = new String(wc.getWebData("listfiles", ""));     // get data from web
            if (wc.getResponseCode() != 200) {   // 200 is a good response code)
                System.out.println("*** ERROR *** Server Response Error:" + wc.getResponseCode());
                return;
            }
            if (resultdata.toLowerCase().startsWith("***error***")) {
                System.out.println(resultdata);
                return;
            }
            String[] str = resultdata.split(";");
            accntFiles.clear();
            for (String str1 : str) {
                accntFiles.add(str1);
            }

        } catch (IOException e) {
            System.out.println("***Error***" + e);
            return;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Secure_Folder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Secure_Folder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Secure_Folder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Secure_Folder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Secure_Folder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelEditButton;
    private javax.swing.JMenuItem CopyCommand;
    private javax.swing.JPopupMenu PopupMenu1;
    private javax.swing.JButton QuitButton;
    private javax.swing.JToggleButton boldButton;
    private javax.swing.JButton editSaveButton;
    private javax.swing.JToolBar editToolBar;
    private javax.swing.JToggleButton italicButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem pasteCommand;
    private javax.swing.JMenuItem popupCopy;
    private javax.swing.JMenuItem popupPaste;
    private javax.swing.JPanel privateInfoPanel;
    private javax.swing.JEditorPane privateText;
    private javax.swing.JTextField searchfield;
    private javax.swing.JLabel searchlabel;
    // End of variables declaration//GEN-END:variables

}
